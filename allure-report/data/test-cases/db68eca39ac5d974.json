{
  "uid" : "db68eca39ac5d974",
  "name" : "test_verify_imdb",
  "fullName" : "cl_automation.test_imdb.Test_Imdb#test_verify_imdb",
  "historyId" : "7e6acdfca12b03649f7ae8ee564f71d3",
  "time" : {
    "start" : 1640287287898,
    "stop" : 1640287290746,
    "duration" : 2848
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Failed conditions count: [ 1 ]\n\nException: Failed by assertion!\nFail in \"C:\\Automation\\Python\\test_automation\\cl_automation\\test_imdb.py:27\" test_verify_imdb()",
  "statusTrace" : "self = <test_automation.cl_automation.test_imdb.Test_Imdb object at 0x00000166A519B280>\n\n    @allure.step(\"Verify IMDB Title and Url using Soft Assert\")\n    def test_verify_imdb(self):\n        driver.refresh()\n        title = driver.title\n        url = driver.current_url\n        print(title)\n        print(url)\n        soft_assert(title == expected_title+\"asd\")\n        soft_assert(url == expected_url)\n>       verify_expectations()\n\ncl_automation\\test_imdb.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv\\lib\\site-packages\\smart_assertions\\smart_assertions.py:24: in verify_expectations\n    report_exceptions()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def report_exceptions():\n        global failed_conditions\n        if failed_conditions:\n            report = ['Failed conditions count: [ {} ]\\n'.format(len(failed_conditions))]\n            for index, failure in enumerate(failed_conditions, start=1):\n                if len(failed_conditions) > 1:\n                    report.append('{}. {}'.format(index, failure))\n                else:\n                    report.append(failure)\n            failed_conditions = []\n>           raise AssertionError('\\n'.join(report))\nE           AssertionError: Failed conditions count: [ 1 ]\nE           \nE           Exception: Failed by assertion!\nE           Fail in \"C:\\Automation\\Python\\test_automation\\cl_automation\\test_imdb.py:27\" test_verify_imdb()\n\nvenv\\lib\\site-packages\\smart_assertions\\smart_assertions.py:43: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "xunit_setup_class_fixture_Test_Imdb",
    "time" : {
      "start" : 1640287279042,
      "stop" : 1640287287896,
      "duration" : 8854
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: Failed conditions count: [ 1 ]\n\nException: Failed by assertion!\nFail in \"C:\\Automation\\Python\\test_automation\\cl_automation\\test_imdb.py:27\" test_verify_imdb()",
    "statusTrace" : "self = <test_automation.cl_automation.test_imdb.Test_Imdb object at 0x00000166A519B280>\n\n    @allure.step(\"Verify IMDB Title and Url using Soft Assert\")\n    def test_verify_imdb(self):\n        driver.refresh()\n        title = driver.title\n        url = driver.current_url\n        print(title)\n        print(url)\n        soft_assert(title == expected_title+\"asd\")\n        soft_assert(url == expected_url)\n>       verify_expectations()\n\ncl_automation\\test_imdb.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv\\lib\\site-packages\\smart_assertions\\smart_assertions.py:24: in verify_expectations\n    report_exceptions()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def report_exceptions():\n        global failed_conditions\n        if failed_conditions:\n            report = ['Failed conditions count: [ {} ]\\n'.format(len(failed_conditions))]\n            for index, failure in enumerate(failed_conditions, start=1):\n                if len(failed_conditions) > 1:\n                    report.append('{}. {}'.format(index, failure))\n                else:\n                    report.append(failure)\n            failed_conditions = []\n>           raise AssertionError('\\n'.join(report))\nE           AssertionError: Failed conditions count: [ 1 ]\nE           \nE           Exception: Failed by assertion!\nE           Fail in \"C:\\Automation\\Python\\test_automation\\cl_automation\\test_imdb.py:27\" test_verify_imdb()\n\nvenv\\lib\\site-packages\\smart_assertions\\smart_assertions.py:43: AssertionError",
    "steps" : [ {
      "name" : "Verify IMDB Title and Url using Soft Assert",
      "time" : {
        "start" : 1640287287898,
        "stop" : 1640287290746,
        "duration" : 2848
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: Failed conditions count: [ 1 ]\n\nException: Failed by assertion!\nFail in \"C:\\Automation\\Python\\test_automation\\cl_automation\\test_imdb.py:27\" test_verify_imdb()\n\n",
      "statusTrace" : "  File \"c:\\automation\\python\\test_automation\\venv\\lib\\site-packages\\allure_commons\\_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"C:\\Automation\\Python\\test_automation\\cl_automation\\test_imdb.py\", line 29, in test_verify_imdb\n    verify_expectations()\n  File \"c:\\automation\\python\\test_automation\\venv\\lib\\site-packages\\smart_assertions\\smart_assertions.py\", line 24, in verify_expectations\n    report_exceptions()\n  File \"c:\\automation\\python\\test_automation\\venv\\lib\\site-packages\\smart_assertions\\smart_assertions.py\", line 43, in report_exceptions\n    raise AssertionError('\\n'.join(report))\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true
    } ],
    "attachments" : [ {
      "uid" : "9c6e98102df37404",
      "name" : "log",
      "source" : "9c6e98102df37404.txt",
      "type" : "text/plain",
      "size" : 411
    } ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "hasContent" : true,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "xunit_setup_class_fixture_Test_Imdb::0",
    "time" : {
      "start" : 1640287290757,
      "stop" : 1640287292875,
      "duration" : 2118
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "cl_automation"
  }, {
    "name" : "suite",
    "value" : "test_imdb"
  }, {
    "name" : "subSuite",
    "value" : "Test_Imdb"
  }, {
    "name" : "host",
    "value" : "DESKTOP-LVSINNE"
  }, {
    "name" : "thread",
    "value" : "16524-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "cl_automation.test_imdb"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "db68eca39ac5d974.json",
  "parameterValues" : [ ]
}