{"name": "test_verify_imdb", "status": "failed", "statusDetails": {"message": "AssertionError: Failed conditions count: [ 1 ]\n\nException: Failed by assertion!\nFail in \"C:\\Automation\\Python\\test_automation\\cl_automation\\test_imdb.py:27\" test_verify_imdb()", "trace": "self = <test_automation.cl_automation.test_imdb.Test_Imdb object at 0x00000166A519B280>\n\n    @allure.step(\"Verify IMDB Title and Url using Soft Assert\")\n    def test_verify_imdb(self):\n        driver.refresh()\n        title = driver.title\n        url = driver.current_url\n        print(title)\n        print(url)\n        soft_assert(title == expected_title+\"asd\")\n        soft_assert(url == expected_url)\n>       verify_expectations()\n\ncl_automation\\test_imdb.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv\\lib\\site-packages\\smart_assertions\\smart_assertions.py:24: in verify_expectations\n    report_exceptions()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def report_exceptions():\n        global failed_conditions\n        if failed_conditions:\n            report = ['Failed conditions count: [ {} ]\\n'.format(len(failed_conditions))]\n            for index, failure in enumerate(failed_conditions, start=1):\n                if len(failed_conditions) > 1:\n                    report.append('{}. {}'.format(index, failure))\n                else:\n                    report.append(failure)\n            failed_conditions = []\n>           raise AssertionError('\\n'.join(report))\nE           AssertionError: Failed conditions count: [ 1 ]\nE           \nE           Exception: Failed by assertion!\nE           Fail in \"C:\\Automation\\Python\\test_automation\\cl_automation\\test_imdb.py:27\" test_verify_imdb()\n\nvenv\\lib\\site-packages\\smart_assertions\\smart_assertions.py:43: AssertionError"}, "steps": [{"name": "Verify IMDB Title and Url using Soft Assert", "status": "failed", "statusDetails": {"message": "AssertionError: Failed conditions count: [ 1 ]\n\nException: Failed by assertion!\nFail in \"C:\\Automation\\Python\\test_automation\\cl_automation\\test_imdb.py:27\" test_verify_imdb()\n\n", "trace": "  File \"c:\\automation\\python\\test_automation\\venv\\lib\\site-packages\\allure_commons\\_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"C:\\Automation\\Python\\test_automation\\cl_automation\\test_imdb.py\", line 29, in test_verify_imdb\n    verify_expectations()\n  File \"c:\\automation\\python\\test_automation\\venv\\lib\\site-packages\\smart_assertions\\smart_assertions.py\", line 24, in verify_expectations\n    report_exceptions()\n  File \"c:\\automation\\python\\test_automation\\venv\\lib\\site-packages\\smart_assertions\\smart_assertions.py\", line 43, in report_exceptions\n    raise AssertionError('\\n'.join(report))\n"}, "start": 1640287287898, "stop": 1640287290746}], "attachments": [{"name": "log", "source": "8a9c9890-30f5-4cf0-bed0-53974f2f6d82-attachment.txt", "type": "text/plain"}], "start": 1640287287898, "stop": 1640287290746, "uuid": "a2e7347b-9c41-4f24-b637-6cfe5a3ef9f7", "historyId": "7e6acdfca12b03649f7ae8ee564f71d3", "testCaseId": "2b8a5b4e0fc1b33f0c9bf74207cd75ed", "fullName": "cl_automation.test_imdb.Test_Imdb#test_verify_imdb", "labels": [{"name": "parentSuite", "value": "cl_automation"}, {"name": "suite", "value": "test_imdb"}, {"name": "subSuite", "value": "Test_Imdb"}, {"name": "host", "value": "DESKTOP-LVSINNE"}, {"name": "thread", "value": "16524-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "cl_automation.test_imdb"}]}